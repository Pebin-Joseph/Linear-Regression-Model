# -*- coding: utf-8 -*-
"""Linear Regression w Python

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1arfXrTQgrJDchtSGCaMGlc-eSrRN13-3
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



df=pd.read_csv('ecommerce.csv')

df.head()

df.info()

df.describe()

#EDA
sns.jointplot(x="Time on App",y="Yearly Amount Spent",data=df,alpha=0.5)

sns.pairplot(df,kind='scatter',plot_kws={'alpha':0.4})

sns.lmplot(x='Length of Membership',y='Yearly Amount Spent',
           scatter_kws={'alpha':0.3},
           data=df)

from sklearn.model_selection import train_test_split

X=df[["Avg. Session Length","Time on App","Time on Website","Length of Membership"]]
y=df['Yearly Amount Spent']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

X_test

# training  the model

from sklearn.linear_model import LinearRegression

lm=LinearRegression()

lm.fit(X_train,y_train)

lm.coef_

cdf=pd.DataFrame(lm.coef_,X.columns,columns=['Coeff'])
print(cdf)

#predictions

predictions =lm.predict(X_test)

predictions

sns.scatterplot(x=predictions,y=y_test)
plt.xlabel('Predictions')
plt.title('Evaluation of  our Linear Model')

from sklearn.metrics import mean_squared_error, mean_absolute_error
import math

print("Mean Absolute Error: ",mean_absolute_error(y_test,predictions))
print("Mean Squared Error: ",mean_squared_error(y_test,predictions))
print("Root Mean Squared Error: ",math.sqrt(mean_squared_error(y_test,predictions)))

#residuals

residuals=y_test-predictions

residuals

sns.displot(residuals,kde=True,bins=20 )#KDE stands for Kernal density estimate..

import pylab
import scipy.stats as  stats
stats.probplot(residuals,dist='norm',plot=pylab)
pylab.show()

def predict_amount(avg_session_length, time_on_app, time_on_website, length_of_membership):
    # Input features
    input_data = [[avg_session_length, time_on_app, time_on_website, length_of_membership]]

    # Make prediction
    prediction = lm.predict(input_data)

    return f"Predicted Yearly Amount Spent: ${prediction[0]:.2f}"

